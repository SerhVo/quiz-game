import React, { useState, useEffect, useCallback, useRef } from "react";
import Question from "./Question";
import Results from "./Results";
import SetupTopic from "./SetupTopic";
import SetupSize from "./SetupSize";
import SetupName from "./SetupName";
import History from "./History";

const Quiz = ({
  onQuizStart,
  onQuizEnd,
  onQuizLoad,
  onHeaderChange,
  onRestartQuiz,
}) => {
  const [allQuestions, setAllQuestions] = useState([]);
  const [questions, setQuestions] = useState([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [score, setScore] = useState(0);
  const [timeLeft, setTimeLeft] = useState(30);
  const [userName, setUserName] = useState("");
  const [error, setError] = useState("");
  const [animationClass, setAnimationClass] = useState("");
  const [startTime, setStartTime] = useState(null);
  const [totalTime, setTotalTime] = useState(null);

  const [selectedTopic, setSelectedTopic] = useState(null);
  const [quizSize, setQuizSize] = useState(null);
  const [showHistory, setShowHistory] = useState(false);
  const [showWelcomeMessage, setShowWelcomeMessage] = useState(false);

  const [loadingError, setLoadingError] = useState(null);
  const [quizStage, setQuizStage] = useState("setup-name");

  const [answerFeedback, setAnswerFeedback] = useState({
    answered: false,
    isCorrect: null,
    correctAnswer: null,
  });

  const [infoMessage, setInfoMessage] = useState("");

  const timerRef = useRef(null);

  const swearWords = ["–º–∞—Ç—é–∫", "–ª–∞–π–∫–∞", "—Å–ª–æ–≤–æ", "–Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤", "fuck", "shit"];
  const topics = [
    "–ó–∞–≥–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è",
    "–ì–µ–æ–≥—Ä–∞—Ñ—ñ—è",
    "–Ü—Å—Ç–æ—Ä—ñ—è",
    "–ë—ñ–æ–ª–æ–≥—ñ—è",
    "–§—ñ–∑–∏–∫–∞",
    "–•—ñ–º—ñ—è",
    "–õ—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    "–ú–æ–≤–∞",
    "–Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
  ];

  const topicFileMap = {
    "–ó–∞–≥–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è": "general_questions.js",
    –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è: "geography.js",
    –Ü—Å—Ç–æ—Ä—ñ—è: "history.js",
    –ë—ñ–æ–ª–æ–≥—ñ—è: "biology.js",
    –§—ñ–∑–∏–∫–∞: "physics.js",
    –•—ñ–º—ñ—è: "chemistry.js",
    –õ—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞: "literature.js",
    –ú–æ–≤–∞: "ukrainian_language.js",
    –Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞: "computer_science.js",
    –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: "mathematics.js",
  };

  const getResultFeedback = useCallback((finalScore, totalQuestions) => {
    const percentage = (finalScore / totalQuestions) * 100;
    if (percentage >= 80) {
      return "ü§© –ß—É–¥–æ–≤–æ";
    } else if (percentage >= 60) {
      return "üëç –î–æ–±—Ä–µ";
    } else if (percentage >= 30) {
      return "üôÇ –ó–∞–¥–æ–≤—ñ–ª—å–Ω–æ";
    } else {
      return "üòû –î—É–∂–µ –ø–æ–≥–∞–Ω–æ";
    }
  }, []);

  const saveResultsToLocalStorage = useCallback(
    (finalScore, totalQuestions, name, time) => {
      const results = JSON.parse(localStorage.getItem("quizResults")) || [];
      const rating = getResultFeedback(finalScore, totalQuestions);
      const newResult = {
        name: name,
        score: finalScore,
        totalQuestions: totalQuestions,
        time: time,
        date: new Date().toISOString(),
        topic: selectedTopic,
        rating: rating,
      };
      results.push(newResult);
      localStorage.setItem("quizResults", JSON.stringify(results));
    },
    [selectedTopic, getResultFeedback]
  );

  const handleAnswerClick = useCallback(
    (selectedOption) => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
        console.log("–¢–∞–π–º–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ");
      }

      const currentQuestion = questions[currentQuestionIndex];
      const isCorrect = selectedOption === currentQuestion.correctAnswer;

      setAnswerFeedback({
        answered: true,
        isCorrect: isCorrect,
        correctAnswer: currentQuestion.correctAnswer,
      });

      setInfoMessage(
        isCorrect ? "–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞ ‚úÖ" : "–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ ‚ùå"
      );

      const nextScore = isCorrect ? score + 1 : score;
      setScore(nextScore);
      console.log(`–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: ${nextScore}`);

      setAnimationClass("fade-out");

      setTimeout(() => {
        const nextQuestionIndex = currentQuestionIndex + 1;
        console.log(`–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –ø–∏—Ç–∞–Ω–Ω—è: ${nextQuestionIndex}`);
        if (nextQuestionIndex < questions.length) {
          setCurrentQuestionIndex(nextQuestionIndex);
          setAnswerFeedback({
            answered: false,
            isCorrect: null,
            correctAnswer: null,
          });
          setInfoMessage("");
        } else {
          const endTime = new Date();
          const elapsedTimeInSeconds = Math.floor((endTime - startTime) / 1000);
          setTotalTime(elapsedTimeInSeconds);
          saveResultsToLocalStorage(
            nextScore,
            questions.length,
            userName,
            elapsedTimeInSeconds
          );
          setQuizStage("results");
          onQuizEnd();
          console.log("–ö–≤—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤");
        }
      }, 2000);
    },
    [
      questions,
      currentQuestionIndex,
      startTime,
      onQuizEnd,
      score,
      userName,
      saveResultsToLocalStorage,
    ]
  );

  const handleRestart = () => {
    console.log("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–≤—ñ–∑—É");
    setCurrentQuestionIndex(0);
    setScore(0);
    setQuizSize(null);
    setSelectedTopic(null);
    setUserName("");
    setError("");
    setTotalTime(null);
    setQuizStage("setup-name");
    setAnswerFeedback({
      answered: false,
      isCorrect: null,
      correctAnswer: null,
    });
    setInfoMessage("");
    onRestartQuiz();
  };

  useEffect(() => {
    const savedName = localStorage.getItem("userName");
    if (savedName) {
      setUserName(savedName);
      setShowWelcomeMessage(true);
      console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–µ —ñ–º'—è: ${savedName}`);
    }
  }, []);

  useEffect(() => {
    if (selectedTopic) {
      console.log(`–û–±—Ä–∞–Ω–æ —Ç–µ–º—É: ${selectedTopic}. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å...`);
      setLoadingError(null);
      setQuizStage("loading");
      const fileName = topicFileMap[selectedTopic];

      if (!fileName) {
        console.error("–ü–æ–º–∏–ª–∫–∞: –ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó —Ç–µ–º–∏.");
        setLoadingError(
          "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è: –Ω–∞–∑–≤–∞ —Ñ–∞–π–ª—É –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞."
        );
        return;
      }

      import(`../data/${fileName}`)
        .then((module) => {
          setAllQuestions(module.questions);
          onQuizLoad?.(selectedTopic);
          setQuizStage("setup-size");
          console.log(
            "–ü–∏—Ç–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±–æ—Ä—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–∏—Ç–∞–Ω—å."
          );
        })
        .catch((error) => {
          console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å:", error);
          setLoadingError(
            "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —ñ—Å–Ω—É—é—Ç—å —Ñ–∞–π–ª–∏."
          );
        });
    }
  }, [selectedTopic, onQuizLoad]);

  useEffect(() => {
    console.log(`–ü–æ—Ç–æ—á–Ω–∏–π –µ—Ç–∞–ø –∫–≤—ñ–∑—É: ${quizStage}`);
    if (showHistory) {
      onHeaderChange("–Ü—Å—Ç–æ—Ä—ñ—è —ñ–≥–æ—Ä");
      return;
    }
    if (showWelcomeMessage) {
      onHeaderChange("–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º!");
      return;
    }
    switch (quizStage) {
      case "setup-name":
        onHeaderChange("–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?");
        break;
      case "setup-topic":
        onHeaderChange("–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É");
        break;
      case "loading":
        onHeaderChange("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å...");
        break;
      case "setup-size":
        onHeaderChange("–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å");
        break;
      case "playing":
        onHeaderChange(selectedTopic);
        break;
      case "results":
        onHeaderChange("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏");
        break;
      default:
        onHeaderChange("–ö–≤—ñ–∑");
        break;
    }
  }, [
    quizStage,
    onHeaderChange,
    selectedTopic,
    showHistory,
    showWelcomeMessage,
  ]);

  // ‚ùó –í–ò–ü–†–ê–í–õ–ï–ù–û: –î–æ–¥–∞–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, —â–æ–± –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ü–∏–∫–ª –Ω–µ –∑–∞–ø—É—Å–∫–∞–≤—Å—è
  useEffect(() => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–∏ –Ω–∞ –µ—Ç–∞–ø—ñ –≥—Ä–∏ —ñ —á–∏ —î –ø–∏—Ç–∞–Ω–Ω—è
    if (quizStage === "playing" && questions.length > 0) {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç–æ—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ –º–∞—Å–∏–≤—É
      if (currentQuestionIndex < questions.length) {
        console.log(
          "–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –ø–∏—Ç–∞–Ω–Ω—è",
          currentQuestionIndex + 1
        );
        setTimeLeft(30);
        setAnimationClass("fade-in");

        if (timerRef.current) {
          clearInterval(timerRef.current);
        }

        const countdown = setInterval(() => {
          setTimeLeft((prevTime) => {
            console.log(`–¢–∞–π–º–µ—Ä: ${prevTime - 1}`);
            if (prevTime <= 1) {
              clearInterval(timerRef.current);
              handleAnswerClick(null);
              return 0;
            }
            return prevTime - 1;
          });
        }, 1000);

        timerRef.current = countdown;
      }
    }

    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, [quizStage, currentQuestionIndex, questions.length, handleAnswerClick]);

  const getRandomQuestions = (count) => {
    const shuffled = [...allQuestions].sort(() => 0.5 - Math.random());
    return shuffled.slice(0, count);
  };

  const validateName = (name) => {
    const trimmedName = name.trim();
    const ukrainianRegex = /^[–ê-–Ø–Ü–á–Ñ“ê–∞-—è—ñ—ó—î“ë\s]+$/;
    const words = trimmedName.split(/\s+/);

    if (trimmedName === "") {
      return "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è.";
    }
    if (!ukrainianRegex.test(trimmedName)) {
      return "–Ü–º'—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏.";
    }
    if (words.length > 2) {
      return "–Ü–º'—è –º–æ–∂–µ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ –æ–¥–Ω–æ–≥–æ –∞–±–æ –¥–≤–æ—Ö —Å–ª—ñ–≤.";
    }
    if (swearWords.some((word) => trimmedName.toLowerCase().includes(word))) {
      return "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–µ —ñ–º'—è.";
    }
    if (
      trimmedName.length > 2 &&
      !/[–∞–µ–∏—ñ–æ—É—è—î—é—ó—ñ]/.test(trimmedName.toLowerCase())
    ) {
      return "–Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º –Ω–∞–±–æ—Ä–æ–º –ª—ñ—Ç–µ—Ä.";
    }
    return "";
  };

  const handleNameChange = (e) => {
    let name = e.target.value;
    if (name.length > 0) {
      name = name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();
    }
    setUserName(name);
  };

  const handleStartQuiz = (e) => {
    e.preventDefault();
    const validationError = validateName(userName);

    if (validationError) {
      setError(validationError);
    } else {
      setError("");
      localStorage.setItem("userName", userName);
      setQuizStage("setup-topic");
    }
  };

  const handleContinue = () => {
    setShowWelcomeMessage(false);
    setQuizStage("setup-topic");
  };

  const handleNewUser = () => {
    setShowWelcomeMessage(false);
    setUserName("");
    localStorage.removeItem("userName");
    setQuizStage("setup-name");
  };

  if (loadingError) {
    return (
      <div className="start-container">
        <p className="error-message">{loadingError}</p>
        <button onClick={() => setSelectedTopic(null)} className="start-button">
          –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É —Ç–µ–º–∏
        </button>
      </div>
    );
  }

  if (showHistory) {
    return <History onReturnToResults={() => setShowHistory(false)} />;
  }

  if (showWelcomeMessage) {
    return (
      <div className="welcome-container">
        <h2>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –Ω–∞–∑–∞–¥, {userName}!</h2>
        <p>–•–æ—á–µ—à –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≥—Ä—É –∑ —Ü–∏–º —ñ–º–µ–Ω–µ–º?</p>
        <div className="welcome-buttons">
          <button onClick={handleContinue} className="continue-button">
            –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏
          </button>
          <button onClick={handleNewUser} className="new-user-button">
            –ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è
          </button>
        </div>
      </div>
    );
  }

  switch (quizStage) {
    case "setup-name":
      return (
        <SetupName
          userName={userName}
          onNameChange={handleNameChange}
          onStartQuiz={handleStartQuiz}
          error={error}
        />
      );
    case "setup-topic":
      return (
        <SetupTopic
          topics={topics}
          onSelectTopic={(topic) => setSelectedTopic(topic)}
        />
      );
    case "loading":
      return <div>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å...</div>;
    case "setup-size":
      return (
        <SetupSize
          selectedTopic={selectedTopic}
          onSelectSize={(size) => {
            setQuizSize(size);
            setQuestions(getRandomQuestions(size));
            setStartTime(new Date());
            setQuizStage("playing");
            onQuizStart();
            console.log("–†–æ–∑–º—ñ—Ä –∫–≤—ñ–∑—É –æ–±—Ä–∞–Ω–æ. –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≥—Ä–∏.");
          }}
        />
      );
    case "playing":
      const currentQuestion = questions[currentQuestionIndex];
      if (!currentQuestion) {
        return <div>–ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</div>;
      }
      return (
        <>
          <div className="quiz-container">
            <div className="timer">
              –ß–∞—Å:{" "}
              <span className={timeLeft <= 5 ? "red-text" : ""}>
                {timeLeft}
              </span>
            </div>
            <div className="question-counter">
              –ü–∏—Ç–∞–Ω–Ω—è {currentQuestionIndex + 1} –∑ {questions.length}
            </div>
          </div>
          {infoMessage && <p className="info-message">{infoMessage}</p>}
          <div className={`question-card-animated ${animationClass}`}>
            <Question
              question={currentQuestion.question}
              options={currentQuestion.options}
              onAnswerClick={handleAnswerClick}
              answerFeedback={answerFeedback}
            />
          </div>
        </>
      );
    case "results":
      return (
        <Results
          score={score}
          totalQuestions={questions.length}
          userName={userName}
          totalTime={totalTime}
          onRestartQuiz={handleRestart}
          onShowHistory={() => setShowHistory(true)}
          quizEndTime={new Date()}
          getResultFeedback={getResultFeedback}
        />
      );
    default:
      return <div>–ù–µ–≤—ñ–¥–æ–º–∏–π –µ—Ç–∞–ø –∫–≤—ñ–∑—É.</div>;
  }
};

export default Quiz;
